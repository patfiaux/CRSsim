install.packages('dplyr')
install.packages('ggplot2')
install.packages('pROC')
install.packages('glmmTMB')
library(dplyr)
library(glmmTMB)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("IRanges", version = "3.8")
BiocManager::install("GenomicRanges", version = "3.8")
library()
library()
library(IRanges)
library(GenomicRanges)
gwas.tab <- read.table("../Data/RA_GWAS.txt", header=T)
head(gwas.tab)
nrow(gwas.tab)
hist(gwas.tab$p.val, breaks=50)
expect.p <- 1:nrow(gwas.tab) / nrow(gwas.tab)
obs.p <- gwas.tab$p.val
qqplot(-log10(expect.p), -log10(obs.p),
xlab="observed -log10(p-values)",
ylab="observed -log10(p-values)")
## add a line with a slope of 1, to show what the p-values would look
## like if the followed the null distribution
abline(a=0, b=1, col="red")
obs.p[obs.p < 1e-20] <- 1e-20
qqplot(-log10(expect.p), -log10(obs.p),
xlab="observed -log10(p-values)",
ylab="observed -log10(p-values)")
abline(a=0, b=1, col="red")
## assign colors to each chromosome
chrom <- unique(gwas.tab$chrom)
chrom.color <- rep(c("slategray3", "slategray4"), (length(chrom)+1)/2)
gwas.tab["color"] <- rep("slategray3", nrow(gwas.tab))
for(i in seq(1,length(chrom))) {
gwas.tab$color[gwas.tab$chrom == chrom[i]] <- chrom.color[i]
}
plot(gwas.tab$genome.pos.hg19, -log10(gwas.tab$p.val),
col=gwas.tab$color, xlab="genome position", ylab="-log10(P-value)")
gwas.tab[gwas.tab$p.val < 1e-200,]
# Make a zoomed-in plot of the p-values just from chromosome 6 32-33MB
f <- which(gwas.tab$chrom=="6" &
gwas.tab$chrom.pos.hg19 > 32e6 &
gwas.tab$chrom.pos.hg19 < 33e6)
plot(gwas.tab$chrom.pos.hg19[f], -log10(gwas.tab$p.val[f]),
xlab="chr6 position", ylab="-log10(P-value)")
p.val <- gwas.tab$p.val
p.val[p.val < 1e-20] <- 1e-20
plot(gwas.tab$genome.pos.hg19, -log10(p.val),
col=gwas.tab$color, xlab="genome position", ylab="-log10(P-value)",
ylim=c(0, 20))
# also draw a line indicating the threshold for genome-wide significance (5e-8)
lines(x=c(0, max(gwas.tab$genome.pos.hg19)), y=rep(-log10(5e-8),2), col="red")
# use 'as.characeter' to make sure we have the sample names as a vector of character strings (rather than
# a factor)
sample.tab <- read.table("samples.txt", header=F)
# use 'as.characeter' to make sure we have the sample names as a vector of character strings (rather than
# a factor)
sample.tab <- read.table("../Data/samples.txt", header=F)
sample.names <- as.character(sample.tab$V1)
head(sample.names)
genotypes.tab <- read.table("../Data/chr22_genotypes.txt", header=T)
head(genotypes.tab)
genotype.matrix <- genotypes.tab[,sample.names]
head(genotype.matrix)
genotypes.tab <- read.table("../Data/chr22_genotypes.txt", header=T)
head(genotypes.tab)
genotype.matrix <- genotypes.tab[,sample.names]
head(genotype.matrix)
n.samples <- length(sample.names)
n.samples
snp.row <- genotypes.tab$SNP.ID == "rs55926024"
genotypes.tab[snp.row, c("CHROM", "CHROM.POS", "ALLELE1", "ALLELE2")]
sum(genotype.matrix[snp.row,] == 1)
total.alleles <- n.samples * 2
sum(genotype.matrix[snp.row,]) / total.alleles
all.gene.tab <- read.table("../Data/gene_mapped_read_counts.txt", header=T)
head(all.gene.tab)
all.count.matrix <- all.gene.tab[,sample.names]
# compute RPK values for each gene
all.rpk.matrix <- all.count.matrix / (all.gene.tab$GENE.CDNA.LEN/1000)
# get column RPK totals, using apply function
rpk.sum <- apply(all.rpk.matrix, 2, sum)
# divide each column by per million scaling factor to get TPM
# Note: the following statement was corrected after class:
all.tpm.matrix <- t(t(all.rpk.matrix) / (rpk.sum/1e6))
nrow(all.gene.tab)
mean.expr <- apply(all.tpm.matrix, 1, mean)
f <- mean.expr > 0.0
hist(log(mean.expr[f]), breaks=50)
sum(mean.expr > 1)
f <- (all.gene.tab$CHROM == "chr22") & (mean.expr > 1.0)
gene.tab <- all.gene.tab[f,]
tpm.matrix <- all.tpm.matrix[f,]
head(tpm.matrix)
expr <- unlist(tpm.matrix[gene.tab$GENE.NAME == "ENSG00000218537",])
genos <- unlist(genotype.matrix[genotypes.tab$SNP.ID == "rs5760108",])
plot(jitter(genos), expr, xlab="genotype", ylab="gene expression (TPM)")
mdl <- lm(expr ~ genos)
summary(mdl)
intercept <- mdl$coefficients[1]
beta <- mdl$coefficients[2]
s <- summary(mdl)
p.val <- s$coefficients["genos","Pr(>|t|)"]
plot(jitter(genos), expr, xlab="genotype", ylab="gene expression (TPM)")
abline(a=intercept, b=beta, col="red")
gene.row <- which(gene.tab$GENE.NAME == "ENSG00000218537")
start <- gene.tab$GENE.START[gene.row] - 50000
end <- gene.tab$GENE.END[gene.row] + 50000
snp.rows <- which(genotypes.tab$CHROM.POS >= start & genotypes.tab$CHROM.POS <= end)
genotypes <- genotype.matrix[snp.rows,]
n.snps <- nrow(genotypes)
p.vals <- rep(NA, n.snps)
for(i in seq(1, n.snps)) {
genos <- unlist(genotypes[i,])
mdl <- lm(expr ~ genos)
s <- summary(mdl)
p.vals[i] <- s$coefficients["genos","Pr(>|t|)"]
}
hist(p.vals)
pos <- genotypes.tab$CHROM.POS[snp.rows]
plot(pos, -log10(p.vals), ylab="-log10(p-value)", xlab="chr22 position")
# add the position of the gene
lines(x=c(gene.tab$GENE.START[gene.row], gene.tab$GENE.END[gene.row]), y=c(0,0),
col="blue", lwd=4)
install.packages('devtools')
library(devtools)
devtools::install_github("stephenslab/susieR")
library(susieR)
set.seed(1)
n    <- 1000
p    <- 1000
beta <- rep(0,p)
beta[c(1,2,300,400)] <- 1
X   <- matrix(rnorm(n*p),nrow=n,ncol=p)
y   <- X %*% beta + rnorm(n)
res <- susie(X,y,L=10)
plot(coef(res),pch = 20)
dim(X)
X[1:5, 1:5]
dim(Y)
dim(y)
head(y)
head(beta)
library(susieR)
set.seed(1)
data(N3finemapping)
attach(N3finemapping)
dim(data$X)
data$X[1:5,1:5]
data$X[1:20,1:5]
head(data$Y)
getwd()
# source('/Applications/W19/CMM262/Midterm/Statistics/plasmidAnnotation.R')
# source('/Applications/W19/CMM262/Midterm/Statistics/genomeAnnotation.R')
'../../'
source('../../plasmidAnnotation.R')
source('../../genomeAnnotation.R')
plasmid.mt <- as.matrix(plasmid)
row_p <- nrow(plasmid.mt)
p_1<- length(grep(1, plasmid))
prob_p <- p_1/row_p
genome.mt <- as.matrix(genome)
row_g <- nrow(genome.mt)
g_1 <- length(grep(1, genome))
prob_g <- g_1/row_g
#example:
#test <- c(1,1,1,0,0,0,1,1,0,0,0,1,1,1,1,1)
# rle(test)
#Run Length Encoding
#lengths: int [1:5] 3 3 2 3 5  => first shows 3 ones in a row and 3 row zeros then
#values : num [1:5] 1 0 1 0 1
clumpiness_p <- rle(grepl("1",plasmid))$lengths[rle(grepl("1",plasmid))$values]
hist(clumpiness_p)
#normal distribution
#shuffling numbers by using rbinom
scramble.p <- rbinom(row_p,1,prob_p)
#showing the number of clusters of 1 together
clumpiness.scramble_p <- rle(grepl("1",scramble.p))$lengths[rle(grepl("1",scramble.p))$values]
hist(clumpiness.scramble_p/row_p)
#length(grep(2,clumpiness_p)) => 16 (how many times we saw 2 ones in a row)
#16 /length of plasmid is around 0.08
#length(grep(2,clumpiness_g)) => 285
#285/length of genome = 0.057
# that was one of the example to show how compact plasmid is
range.to.null <- abs(mean(clumpiness.scramble_p) - mean(clumpiness_p))
#one tail Pvalue
more.extreme <- (clumpiness.scramble_p < (mean(clumpiness.scramble_p) - range.to.null))
p.value <- sum(more.extreme == TRUE)/length(more.extreme)
print(p.value)
#for genome
clumpiness_g <- rle(grepl("1",genome))$lengths[rle(grepl("1",genome))$values]
hist(clumpiness_g)
#shuffling numbers
scramble.g <- rbinom(row_g,1,prob_g)
clumpiness.scramble_g <- rle(grepl("1",scramble.g))$lengths[rle(grepl("1",scramble.g))$values]
hist(clumpiness_g/row_g)
range.to.null.g <- abs(mean(clumpiness.scramble_g) - mean(clumpiness_g))
#one tail Pvalue
more.extreme.g <- (clumpiness.scramble_g < (mean(clumpiness.scramble_g) - range.to.null.g))
p.value2 <- sum(more.extreme.g == TRUE)/length(more.extreme.g)
print(p.value2)
library(tidyr)
#library(tidyr)
library(dplyr)
install.packages("stringr")
library(stringr)
# source('/Applications/W19/CMM262/Midterm/Statistics/plasmidAnnotation.R')
# source('/Applications/W19/CMM262/Midterm/Statistics/genomeAnnotation.R')
genome.str <- toString(genome)
plasmid.str <- toString(plasmid)
clumpiness.1 <- c(1,1,0,0)
clumpiness.1.str <- toString(clumpiness.1)
count.clumpiness.1 <- str_count(plasmid.str, pattern = clumpiness.1.str)
clumpiness.2 <- c(1,1,1,0)
clumpiness.2.str <- toString(clumpiness.2)
count.clumpiness.2 <- str_count(plasmid.str, pattern = clumpiness.2.str)
count.clumpiness.genome.1 <- str_count(genome.str, pattern = clumpiness.1.str)
count.clumpiness.genome.2 <- str_count(genome.str, pattern = clumpiness.2.str)
plasmid.matrix <- as.matrix(plasmid)
r_p <- nrow(plasmid.matrix)
ratio.plasmid <- (count.clumpiness.1 +count.clumpiness.2)/ r_p
genome.matrix <- as.matrix(genome)
r_g <- nrow(genome.matrix)
ratio.genome <- (count.clumpiness.genome.1 + count.clumpiness.genome.2)/r_g
ratio.diff <- ratio.plasmid/ratio.genome
scramble_function <- function(input.data){
Scrambled.Data <- input.data
My.Scrambled.Data <- sample(Scrambled.Data, length(Scrambled.Data), replace =F)
Scramble.Data.original <- as.matrix(My.Scrambled.Data)
str.Scramble.Data <- toString(Scramble.Data.original)
Scrambled.Groupclump <- str_count(str.Scramble.Data, pattern = clumpiness.1.str)
Scrambled.Groupclump.2 <- str_count(str.Scramble.Data, pattern = clumpiness.2.str)
null.ratio <- (Scrambled.Groupclump +Scrambled.Groupclump.2) / ratio.genome *r_p
return(null.ratio)
}
#just scrambling the plasmid, genome is the base of measurements:
plasmid.df <- as.data.frame(plasmid)
null.distribution <- replicate(1000,scramble_function(plasmid.df))
more.extreme <- (null.distribution <(-abs(ratio.diff)) | null.distribution > abs(ratio.diff))
p.value <- sum(more.extreme == TRUE)/length(more.extreme)
print(p.value)
library(GenomicRanges)
intall.packages('rcurl')
install.packages('rcurl')
install.packages('RCurl')
library(GenomicRanges)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomeInfoDb", version = "3.8")
library(GenomicRanges)
library(GenomeInfoDb)
library(RCurl)
install.packages('RCurl')
.libPaths()
install.packages('RCurl')
library(RCurl)
Sys.getenv("R_LIBS_USER")
install.packages('rlang')
library(devtools)
install.packages('devtools')
library(devtools)
setwd('McVicker_lab/RELICS-performance/Example_performanceEval/')
source('../../RELICS/Code/RELICS.r')
source('../Code/RELICS_performance.r')
debug(analyze_data)
analysis.specs <- list()
analysis.specs$dataName <- 'Example_performanceEval2'
analysis.specs$CountFileLoc <- '../Example_simulations/Example_simulation/Example_simulation_sim1_counts.csv'
analysis.specs$sgRNAInfoFileLoc <- '../Example_simulations/Example_simulation/Example_simulation_sim1_info.csv'
analysis.specs$repl_groups <- '1,2;3,4'
analysis.specs$glmm_positiveTraining <- 'exon'
analysis.specs$glmm_negativeTraining <- 'neg'
analysis.specs$Group1 <- c(1,3)
analysis.specs$Group2 <- c(2,4)
analysis.specs$foldChangePaired <- 'yes' # else set to 'no'
analysis.specs$Method <- c('RELICS', 'FoldChange', 'edgeR', 'DESeq2')
analysis.specs$simulated_data <- 'yes' # specify that the analysis is based on simulated data where the ground thruth is known
analysis.specs$pos_regions <- '../Example_simulations/Example_simulation/Example_simulation_sim1_enhancers.csv' # file location of all known positive regions
analysis.specs$evaluate_perElement_Performance <- 'yes' # specify that the performance of different methods is to be evaluated
analysis.specs$positiveLabels <- 'pos' # label for regions which are true positives
analysis.specs$negativeLabels <- c('neg', 'chr') # labels for regions which are true negatives
analysis.specs$crisprSystem <- 'CRISPRi' # other potions: CRISPRcas9, CRISPRa, dualCRISPR
analysis.specs$crisprEffectRange <- 1000
write_specs_file(analysis.specs, 'Example_performanceEval2')
analyze_data('Example_performanceEval2.txt')
length(analysis.specs)
debug(calculate_scores)
analysis.specs <- list()
analysis.specs$dataName <- 'Example_performanceEval2'
analysis.specs$CountFileLoc <- '../Example_data/Example_simulation_counts.csv'
analysis.specs$sgRNAInfoFileLoc <- '../Example_data/Example_simulation_info.csv'
analysis.specs$repl_groups <- '1,2;3,4'
analysis.specs$glmm_positiveTraining <- 'exon'
analysis.specs$glmm_negativeTraining <- 'neg'
analysis.specs$Group1 <- c(1,3)
analysis.specs$Group2 <- c(2,4)
analysis.specs$foldChangePaired <- 'yes' # else set to 'no'
analysis.specs$Method <- c('RELICS', 'FoldChange', 'edgeR', 'DESeq2')
analysis.specs$simulated_data <- 'yes' # specify that the analysis is based on simulated data where the ground thruth is known
analysis.specs$pos_regions <- '../Example_simulations/Example_simulation/Example_simulation_sim1_enhancers.csv' # file location of all known positive regions
analysis.specs$evaluate_perElement_Performance <- 'yes' # specify that the performance of different methods is to be evaluated
analysis.specs$positiveLabels <- 'pos' # label for regions which are true positives
analysis.specs$negativeLabels <- c('neg', 'chr') # labels for regions which are true negatives
analysis.specs$crisprSystem <- 'CRISPRi' # other potions: CRISPRcas9, CRISPRa, dualCRISPR
analysis.specs$crisprEffectRange <- 1000
write_specs_file(analysis.specs, 'Example_performanceEval2')
analyze_data('Example_performanceEval2.txt')
debug(calculate_scores)
head(sample.counts)
dim(arranged.data.counts)
filtered.data.specs$new_grp1
filtered.data.specs$labelHierarchy
debug(score_calculation)
head( out.list$FoldChange)
dim9 out.list$FoldChange
dim( out.list$FoldChange)
dim( out.list$FoldChange)
head( out.list$FoldChange)
debug(edgeR_analysis)
out.list$edgeR <- edgeR_analysis(input.counts, input.info, input.specs)
length(edgeR.list)
debug(run_edgeR)
edgeR.list <- run_edgeR(input.counts,input.info,input.specs)
typeof(DGE.output)
typeof(edgeR.design)
typeof(edgeR.dispersion)
edgeR.dispersion <- suppressWarnings(estimateDisp(DGE.output, edgeR.design))
typeof(edgeR.dispersion)
